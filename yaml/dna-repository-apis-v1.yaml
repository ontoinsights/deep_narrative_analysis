openapi: 3.0.3
info:
  title: Deep Narrative Analysis RESTful APIs v1.1
  description: |-
    Defines the interface for ingesting, retrieving, editing and deleting 
    narratives and news articles using the Deep Narrative Analysis (DNA) 
    infrastructure.
    
    Useful links:
    - [GitHub DNA repository](https://github.com/ontoinsights/deep_narrative_analysis)
    - [DNA blog](https://hearing-all-voices.blogspot.com/)
    
    To use the API, the following should be downloaded/installed:
    - The Stardog data store (https://www.stardog.com/get-started/)
    - The DNA GitHub repository 
      (https://github.com/ontoinsights/deep_narrative_analysis)
    - All DNA Python libraries specified in the requirements.txt file (in
      the GitHub repository)
    - The appropriate spaCy language model (for English, en_core_web_trf)
    
    More information can be found in the GitHub repository's README.txt file.
    
    The following workflow is recommended:
    - Go to the 'dna' directory in the downloaded GitHub DNA file structure
    - Still in the 'dna' directory, execute "flask run"
    - Create a new repository by POSTing to
      /dna/v1/repositories?db=db_addr&repository=repo_name, or an existing 
      repository can be reused
    - Acquire news articles to be ingested by GETting
      /dna/v1/news?topic=topic_name&from=from_date&to=to_date&key=news_key
      - At this time, only English text articles will be acquired; In the future, 
        another parameter will be added to the API to indicate the language
    - Ingest narratives or articles to the repository by POSTing to 
      /dna/v1/repositories/narratives?db=db_addr&repository=repo_name 
      with a request body holding the narrative metadata and text 
      (the response body will contain the narrative's id)
      - At this time, only English text narratives and articles are 
        supported; In the future, another parameter will be added to the 
        API to indicate the language
    - Review the contents of a repository by GETting 
      /dna/v1/repositories/narratives?db=db_addr&repository=repo_name
      (the response body will contain a list of all narratives and articles
      and a subset of their data)
    - To obtain the specific triples in a narrative or article, GET 
      /dna/v1/repositories/narratives/graphs?db=db_addr&
         repository=repo_name&narrativeId=narr_id
      (the response body will contain a list of all triples)
      
    Note that GETting /dna/v1/repositories or /dna/v1/repositories/narratives
    will return a list of all DNA repositories or all narratives/articles in
    a repository, respectively.
    
    DELETE using the /dna/v1/repositories or /dna/v1/repositories/narratives 
    APIs will remove the specified repository or narrative/article. Please use 
    these commands with caution since the results are not reversable.
  contact:
    email: andrea@ontoinsights.com
  license:
    name: Creative Commons Attribution 4.0 International Public License
    url: https://creativecommons.org/licenses/by/4.0/legalcode
  version: '1.1'
paths:
  /dna/v1/news:
    get:
      summary: >-
        Get a list of news articles regarding the specified topic,
        published within the indicated date range
      description: >-
        Using the NewsAPI, return a list of articles relevant to the
        specified topic and within the indicated date range
      parameters:
        - $ref: '#/components/parameters/topic'
        - $ref: '#/components/parameters/from'
        - $ref: '#/components/parameters/to'
      operationId: getNews
      responses:
        '200':
          description: Successful operation (may be empty)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsList' 
        '400':
          description: News list - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'  
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'  
  /dna/v1/repositories:
    get:
      summary: >-
        Get a list of all repositories
      description: >-
        Return the names and creation dates of all the DNA repositories 
        of the specified database server
      parameters:
        - $ref: '#/components/parameters/db'
      operationId: getRepositories
      responses:
        '200':
          description: Successful operation (may be empty)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryList' 
        '400':
          description: Repository list - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'  
        '404':
          description: Repository list - Database server not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Database server at address, http://example.com, was not found
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'  
    post:
      summary: >-
        Create a new repository
      description: >-
        Create a new repository with the specified name, 
        in the specified database server
      parameters:
        - $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/repository'
      operationId: createRepository
      responses:
        '201':
          description: Repository created
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    type: string
                    example: dna
        '400':
          description: Repository creation - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'  
        '404':
          description: Repository creation - Database not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Database server at address, http://example.com, was not found
        '409':
          description: Repository already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Repository with the name, foo, already exists at http://example.com
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'  
    delete:
      summary: Delete a repository
      description: >-
        Delete the specified repository in the specified database server
      parameters:
        - $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/repository'
      operationId: deleteRepository
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: string
                    example: dna
        '400':
          description: Repository deletion - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'  
        '404':
          description: Repository deletion - DB or repository not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Repository with the name, foo, was not found at http://example.com
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'  
  /dna/v1/repositories/narratives:
    get:
      summary: >-
        Get a list of all narratives or articles (and their meta-data) 
        in the specified repository, for the specified database server
      description: >-
        Return the meta-data for all narratives or articles in the 
        specified repository of the indicated database server
      parameters:
        - $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/repository'
      operationId: getNarratives
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NarrativeList' 
        '400':
          description: Narrative list - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'  
        '404':
          description: Narrative list - DB or repository not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Repository with the name, foo, was not found at http://example.com
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'  
    post:
      summary: Ingest a narrative or news article to the specified repository
      description: >-
        Process a narrative or article based on details in the query parameters
        and request body, and ingest it to the specified repository of the 
        indicated database server
      parameters:
        - $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/repository'
        - $ref: '#/components/parameters/extSources'
        - $ref: '#/components/parameters/isBiography'
      operationId: ingestNarrative
      requestBody:
        description: Ingest narrative
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputNarrative'  
        required: true
      responses:
        '201':
          description: Knowledge graph created
          content:
            application/json:
              schema:
                type: object
                properties:
                  server:
                    type: string
                    example: http://example.com
                  repository:
                    type: string
                    example: dna
                  narrativeDetails:
                    $ref: '#/components/schemas/NarrativeDetails'
        '400':
          description: Narrative ingest - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'  
        '404':
          description: Narrative ingest - DB or repository not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Repository with the name, foo, was not found at http://example.com
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'  
    delete:
      summary: Delete a narrative or news article
      description: >-
        Delete the specified narrative or news article in the 
        specified repository of the indicated database server
      parameters:
        - $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/repository'
        - $ref: '#/components/parameters/narrativeId'
      operationId: deleteText
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  repository:
                    type: string
                    example: dna
                  deleted:
                    type: string
                    example: 73cf1b89
        '400':
          description: Narrative delete - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'  
        '404':
          description: Narrative delete - Db, repository or narrative not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: >-
                      Narrative with the id, 73cf1b89, was not found in the
                      repository, foo, at http://example.com
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'  
  /dna/v1/repositories/narratives/graphs:
    get:
      summary: Get a narrative's or news article's knowledge graph
      description: >-
        Get the knowledge graph for the narrative or article with 
        the specified id in the repository of the indicated database
        server
      operationId: getGraph
      parameters:
        - $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/repository'
        - $ref: '#/components/parameters/narrativeId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeGraphDetails'  
        '400':
          description: Graph retrieval - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'  
        '404':
          description: Graph retrieval - Db, repository or narrative not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: >-
                      Narrative with the id, 73cf1b89, was not found in foo at http://example.com
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'  
    put:
      summary: Update a narrative's or news article's knowledge graph
      description: >-
        Update the knowledge graph for the specific narrative or article
        in the repository of the indicated database server. At this time,
        the entire graph must be replaced. In the future, it will be 
        possible to update select triples.
      operationId: updateGraph
      parameters:
        - $ref: '#/components/parameters/db'
        - $ref: '#/components/parameters/repository'
        - $ref: '#/components/parameters/narrativeId'
      requestBody:
        description: Updated narrative triples
        content:
          application/json:
            schema:
              type: object
              properties:
                triples:
                  type: array
                  items:
                    type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  repository:
                    type: string
                    example: dna
                  narrativeId:
                    type: string
                    example: 73cf1b89
                  processed:
                    type: string
                    format: date-time
                    example: 2022-09-09T12:41:00Z
                  numberOfTriples:
                    type: integer
                    example: 500
        '400':
          description: Graph update - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'  
        '404':
          description: Graph update - Db, repository or narrative not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: >-
                      Narrative with the id, 73cf1b89, was not found in foo at http://example.com
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
components:
  parameters:
    db:
      name: db
      in: query
      description: >-
        String specifying the address of the database server holding
        the repository
      required: false
      schema:
        type: string
        default: http://localhost:5820
    extSources:
      name: extSources
      in: query
      description: >-
        Boolean indicating whether details from external sources (such as 
        Wikipedia/Wikidata or GeoNames) should be included in the parse
      required: false
      schema:
        type: boolean
        default: false
    from:
      name: from
      in: query
      description: >-
        Date in yyyy-mm-dd format on or after which the news article
        is published
      required: true
      schema:
        type: string
        format: date
        example: 2023-07-09
    isBiography:
      name: isBiography
      in: query
      description: >-
        Boolean indicating whether the text is a biography/autobiography (if 
        true) or a news article/blog post/etc. This has implications for the
        parse. For example, in a biography, it is likely that a coherent 
        timeline can be extracted. The default is 'false'.
      required: false
      schema:
        type: boolean
        default: false
    narrativeId:
      name: narrativeId
      in: query
      description: UUID for a narrative in the repository
      required: true
      schema:
        type: string
        format: uuid
        example: 73cf1b89
    repository:
      name: repository
      in: query
      description: >-
        Name of the repository holding narratives
      required: true
      schema:
        type: string
    to:
      name: to
      in: query
      description: >-
        Date in yyyy-mm-dd format before which the news article
        is published
      required: true
      schema:
        type: string
        format: date
        example: 2023-07-11
    topic:
      name: topic
      in: query
      description: >-
        String specifying keywords/phrases to locate in news article 
        titles and bodies. Format rules: 1) Surround phrases with 
        quotes (") for exact match; 2) Prepend words or phrases that 
        must appear with a + symbol; 3) Prepend words that must not 
        appear with a - symbol; 4) Alternatively, use AND / OR / NOT 
        keywords, and group these with parenthesis; 5) URL-encode 
        the string
      required: true
      schema:
        type: string
        example: +Omnicron+vaccine
  schemas:
    ArticleList:
      type: array
      items:
        $ref: '#/components/schemas/ArticleDetails'  
    ArticleDetails:
      type: object
      properties:
        title:
          type: string
          example: New vaccine released
        published:
          type: string
          format: date-time
          example: 2023-07-10T23:12:45
        source:
          type: string
          example: New York Times
        url:
          type: string
          example: https://www.nytimes.com/2023/07/10/example/foo.html
        length:
          type: integer
          example: 2351
    BadRequest:
      type: object
      properties:
        error:
          type: string
          enum: [ missing, invalid ]
          example: missing
        detail:
          type: string
          example: The argument parameter, xxx, is missing
    InputNarrative:
      type: object
      properties:
        narrativeMetadata: 
          $ref: '#/components/schemas/NarrativeMeta'
        narrative:
          type: string
          example: This is the text of the narrative.
    InternalError:
      type: object
      properties:
        error:
          type: array
          items:
            type: string
            example: error details
    KnowledgeGraphDetails:
      type: object
      properties:
        server:
          type: string
          example: http://example.com
        repository:
          type: string
          example: dna
        narrativeDetails:
          $ref: '#/components/schemas/NarrativeDetails'
        triples:
          type: array
          items:
            type: string
    NarrativeDetails:
      type: object
      properties:
        narrativeId:
          type: string
          example: 73cf1b89
        processed:
          type: string
          description: Date/time when the text was processed by DNA
          format: date-time 
          example: 2022-09-09T12:41:00Z
        numberOfTriples:
          type: integer
          description: Number of triples in the knowledge graph
          example: 500
        narrativeMetadata:
          $ref: '#/components/schemas/NarrativeMeta'
    NarrativeList:
      type: object
      properties:
        repository:
          type: string
          example: dna
        narratives:
          type: array
          items:
            $ref: '#/components/schemas/NarrativeDetails'
    NarrativeMeta:
      type: object
      properties:
        title:
            type: string
            description: Article, blog post, ... title
            example: A Narrative Title
        published:
            type: string
            description: Date/time when the text was published
            format: date-time 
            example: 2022-07-14T17:32:28Z
        source:
            type: string
            example: Wall Street Journal
        url:
            type: string
            description: >-
              String identifying the online location of the article, its 
              reference in an online repository, etc. 
            example: Identifier_such_as_URL
        length:
            type: integer
            description: Length of the narrative
            example: 2351
    NewsList:
      type: object
      properties:
        topic:
          type: string
          example: +Omnicron+vaccine
        fromDate:
          type: string
          format: date
          example: 2023-07-09
        toDate:
          type: string
          format: date
          example: 2023-07-11
        articles:
          $ref: '#/components/schemas/ArticleList'
    RepositoryList:
      type: array
      items:
        $ref: '#/components/schemas/RepositoryMeta'  
    RepositoryMeta:
      type: object
      properties:
        repository:
          type: string
          example: narratives1
        created:
          type: string
          format: date-time
          example: 2022-07-21T17:32:28Z
