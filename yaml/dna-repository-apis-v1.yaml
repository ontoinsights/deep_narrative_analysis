openapi: 3.0.3
info:
  title: Deep Narrative Analysis RESTful APIs v1.2
  description: |-
    Defines the interface for ingesting, retrieving, editing and deleting 
    narratives and news articles using the Deep Narrative Analysis (DNA) 
    infrastructure.
    
    To use the API and for more information, refer to the README.txt file in 
    the [GitHub DNA repository](https://github.com/ontoinsights/deep_narrative_analysis).
    Note that this implementation assumes storage of graphs in a Stardog database.
    An environment variable defines the location of that database (typically a 
    Stardog Cloud instance). If that does not exist or the environment variable is
    not defined, DNA will not function.
    
    The following is a typical workflow after starting the DNA application:
    - Create a new repository by POSTing to
      /dna/v1/repositories?repository=repo_name, or an existing repository may 
      be reused
    - Acquire news articles to be ingested by POSTing to
      /dna/v1/news?topic=topic_name&from=from_date&to=to_date&key=news_key
      - At this time, only English text articles will be ingested
    - OR ingest narratives or articles to the repository by POSTing to 
      /dna/v1/repositories/narratives?repository=repo_name 
      with a request body holding the narrative metadata and text 
      (the response body will contain the narrative's id)
      - As above, only English text narratives and articles are 
        supported
    - Review the contents of a repository by GETting 
      /dna/v1/repositories/narratives?repository=repo_name
      (the response body will contain a list of all narratives and articles
      and a subset of their data)
    - To obtain the specific triples in a narrative or article, GET 
      /dna/v1/repositories/narratives/graphs?repository=repo_name&narrativeId=narr_id
      (the response body will contain a list of all triples)
      
    Note that GETting /dna/v1/repositories or /dna/v1/repositories/narratives
    will return a list of all DNA repositories or all narratives/articles in
    a repository, respectively.
    
    DELETEing using the /dna/v1/repositories or /dna/v1/repositories/narratives 
    APIs will remove the specified repository or narrative/article. Please use 
    these commands with caution since the results are not reversable.
  contact:
    email: andrea@ontoinsights.com
  license:
    name: Creative Commons Attribution 4.0 International Public License
    url: https://creativecommons.org/licenses/by/4.0/legalcode
  version: '1.2'
paths:
  /dna/v1/news:
    get:
      summary: >-
        Get a list of news articles regarding the specified topic,
        published within the indicated date range
      description: >-
        Using the NewsAPI, return a list of articles relevant to the
        specified topic and within the indicated date range. Note that
        the 'free' version of newsapi.org restricts requests to a time
        period of the previous month. Take care when defining a time 
        period to match the pricing model associated with your API key.
      parameters:
        - $ref: '#/components/parameters/topic'
        - $ref: '#/components/parameters/fromDate'
        - $ref: '#/components/parameters/toDate'
      operationId: getNews
      responses:
        '200':
          description: Successful operation (may be empty)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsList' 
        '400':
          description: News list - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'  
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'  
    post:
      summary: >-
        Query for and ingest a list of news articles given the
        query parameter details 
      description: >-
        Get a list of news articles regarding the specified topic,
        published within the indicated date range, and then ingest
        ones with sufficient, accessible text to the specified 
        repository. The number ingested can be limited to the first
        x, where x is specified using the number_to_ingest query
        parameter.
      parameters:
        - $ref: '#/components/parameters/repository'
        - $ref: '#/components/parameters/topic'
        - $ref: '#/components/parameters/fromDate'
        - $ref: '#/components/parameters/toDate'
        - $ref: '#/components/parameters/number_to_ingest'
      operationId: ingestNews
      responses:
        '200':
          description: News articles ingested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsIngested' 
        '400':
          description: News ingest - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest' 
        '404':
          description: News ingest - Repository not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Repository with the name, foo, was not found at http://example.com
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'  
  /dna/v1/repositories:
    get:
      summary: >-
        Get a list of all repositories
      description: >-
        Return the names and creation dates of all the DNA repositories 
        of the specified database server
      operationId: getRepositories
      responses:
        '200':
          description: Successful operation (may be empty)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryList' 
        '400':
          description: Repository list - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'  
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'  
    post:
      summary: >-
        Create a new repository
      description: >-
        Create a new repository with the specified name
      parameters:
        - $ref: '#/components/parameters/repository'
      operationId: createRepository
      responses:
        '201':
          description: Repository created
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    type: string
                    example: dna
        '400':
          description: Repository creation - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest' 
        '409':
          description: Repository already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Repository with the name, foo, already exists at http://example.com
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'  
    delete:
      summary: Delete a repository
      description: >-
        Delete the specified repository 
      parameters:
        - $ref: '#/components/parameters/repository'
      operationId: deleteRepository
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: string
                    example: dna
        '400':
          description: Repository deletion - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'  
        '404':
          description: Repository deletion - Repository not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Repository with the name, foo, was not found at http://example.com
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'  
  /dna/v1/repositories/narratives:
    get:
      summary: >-
        Get a list of all narratives or articles (and their meta-data) 
        in the specified repository
      description: >-
        Return the meta-data for all narratives or articles in the 
        specified repository
      parameters:
        - $ref: '#/components/parameters/repository'
      operationId: getNarratives
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NarrativeList' 
        '400':
          description: Narrative list - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest' 
        '404':
          description: Narrative list - Repository not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Repository with the name, foo, was not found at http://example.com
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'  
    post:
      summary: Ingest a narrative or news article to the specified repository
      description: >-
        Process a narrative or article based on details in the query parameters
        and request body, and ingest it to the specified repository 
      parameters:
        - $ref: '#/components/parameters/repository'
      operationId: ingestNarrative
      requestBody:
        description: Ingest narrative
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputNarrative' 
        required: true
      responses:
        '201':
          description: Information graph created
          content:
            application/json:
              schema:
                type: object
                properties:
                  server:
                    type: string
                    example: http://example.com
                  repository:
                    type: string
                    example: dna
                  narrativeDetails:
                    $ref: '#/components/schemas/NarrativeDetails'
        '400':
          description: Narrative ingest - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'  
        '404':
          description: Narrative ingest - Repository not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Repository with the name, foo, was not found at http://example.com
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'  
    delete:
      summary: Delete a narrative or news article
      description: >-
        Delete the specified narrative or news article in the 
        specified repository 
      parameters:
        - $ref: '#/components/parameters/repository'
        - $ref: '#/components/parameters/narrativeId'
      operationId: deleteText
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  repository:
                    type: string
                    example: dna
                  deleted:
                    type: string
                    example: 73cf1b89
        '400':
          description: Narrative delete - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'  
        '404':
          description: Narrative delete - Repository or narrative not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: >-
                      Narrative with the id, 73cf1b89, was not found in the
                      repository, foo, at http://example.com
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'  
  /dna/v1/repositories/narratives/graphs:
    get:
      summary: Get a narrative's or news article's information graph
      description: >-
        Get the information graph for the narrative or article with 
        the specified id in the repository 
        server
      operationId: getGraph
      parameters:
        - $ref: '#/components/parameters/repository'
        - $ref: '#/components/parameters/narrativeId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoGraphDetails'  
        '400':
          description: Graph retrieval - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'  
        '404':
          description: Graph retrieval - Repository or narrative not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: >-
                      Narrative with the id, 73cf1b89, was not found in foo at http://example.com
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'  
    put:
      summary: Update a narrative's or news article's information graph
      description: >-
        Update the information graph for the specific narrative or article
        in the repository. At this time, the entire graph must be replaced. 
        In the future, it will be possible to update select triples.
      operationId: updateGraph
      parameters:
        - $ref: '#/components/parameters/repository'
        - $ref: '#/components/parameters/narrativeId'
      requestBody:
        description: Updated narrative triples
        content:
          application/json:
            schema:
              type: object
              properties:
                triples:
                  type: array
                  items:
                    type: string
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  repository:
                    type: string
                    example: dna
                  narrativeId:
                    type: string
                    example: 73cf1b89
                  processed:
                    type: string
                    format: date-time
                    example: 2022-09-09T12:41:00Z
                  numberOfTriples:
                    type: integer
                    example: 500
        '400':
          description: Graph update - Missing or invalid content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'  
        '404':
          description: Graph update - Repository or narrative not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: >-
                      Narrative with the id, 73cf1b89, was not found in foo at http://example.com
        '500':
          description: Internal processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalError'
components:
  parameters:
    fromDate:
      name: fromDate
      in: query
      description: >-
        Date in yyyy-mm-dd format on or after which the news article
        is published
      required: true
      schema:
        type: string
        format: date
        example: 2023-07-09
    narrativeId:
      name: narrativeId
      in: query
      description: UUID for a narrative in the repository
      required: true
      schema:
        type: string
        format: uuid
        example: 73cf1b89
    numberToIngest:
      name: numberToIngest
      in: query
      description: >-
        Number of news articles to ingest from a retrieval
        from newsorg.api. If not specified, all articles
        that are retrieved with sufficient, valid text are
        ingested.
      required: false
      schema:
        type: integer
    repository:
      name: repository
      in: query
      description: >-
        Name of the repository holding narratives
      required: true
      schema:
        type: string
    toDate:
      name: toDate
      in: query
      description: >-
        Date in yyyy-mm-dd format before which the news article
        is published
      required: true
      schema:
        type: string
        format: date
        example: 2023-07-11
    topic:
      name: topic
      in: query
      description: >-
        String specifying keywords/phrases to locate in news article 
        titles and bodies. Format rules: 1) Surround phrases with 
        quotes (") for exact match; 2) Prepend words or phrases that 
        must appear with a + symbol; 3) Prepend words that must not 
        appear with a - symbol; 4) Alternatively, use AND / OR / NOT 
        keywords, and group these with parenthesis; 5) URL-encode 
        the string
      required: true
      schema:
        type: string
        example: +Omnicron+vaccine
  schemas:
    ArticleList:
      type: array
      items:
        $ref: '#/components/schemas/ArticleDetails'  
    ArticleDetails:
      type: object
      properties:
        title:
          type: string
          example: New vaccine released
        published:
          type: string
          format: date-time
          example: 2023-07-10T23:12:45
        source:
          type: string
          example: New York Times
        url:
          type: string
          example: https://www.nytimes.com/2023/07/10/example/foo.html
        length:
          type: integer
          example: 2351
    BadRequest:
      type: object
      properties:
        error:
          type: string
          enum: [ missing, invalid ]
          example: missing
        detail:
          type: string
          example: The argument parameter, xxx, is missing
    InputNarrative:
      type: object
      properties:
        narrativeMetadata: 
          $ref: '#/components/schemas/NarrativeMeta'
        narrative:
          type: string
          example: This is the text of the narrative.
    InternalError:
      type: object
      properties:
        error:
          type: array
          items:
            type: string
            example: error details
    InfoGraphDetails:
      type: object
      properties:
        server:
          type: string
          example: http://example.com
        repository:
          type: string
          example: dna
        narrativeDetails:
          $ref: '#/components/schemas/NarrativeDetails'
        triples:
          type: array
          items:
            type: string
    NarrativeDetails:
      type: object
      properties:
        narrativeId:
          type: string
          example: 73cf1b89
        processed:
          type: string
          description: Date/time when the text was processed by DNA
          format: date-time 
          example: 2022-09-09T12:41:00Z
        numberOfTriples:
          type: integer
          description: Number of triples in the information graph
          example: 500
        narrativeMetadata:
          $ref: '#/components/schemas/NarrativeMeta'
    NarrativeList:
      type: object
      properties:
        repository:
          type: string
          example: dna
        narratives:
          type: array
          items:
            $ref: '#/components/schemas/NarrativeDetails'
    NarrativeMeta:
      type: object
      properties:
        title:
            type: string
            description: Article, blog post, ... title
            example: A Narrative Title
        published:
            type: string
            description: Date/time when the text was published
            format: date-time 
            example: 2022-07-14T17:32:28Z
        source:
            type: string
            example: Wall Street Journal
        url:
            type: string
            description: >-
              String identifying the online location of the article, its 
              reference in an online repository, etc. 
            example: Identifier_such_as_URL
        length:
            type: integer
            description: Length of the narrative
            example: 2351
    NewsList:
      type: object
      properties:
        topic:
          type: string
          example: +Omnicron+vaccine
        fromDate:
          type: string
          format: date
          example: 2023-07-09
        toDate:
          type: string
          format: date
          example: 2023-07-11
        articles:
          $ref: '#/components/schemas/ArticleList'
    NewsIngested:
      type: object
      properties:
        topic:
          type: string
          example: +Omnicron+vaccine
        fromDate:
          type: string
          format: date
          example: 2023-07-09
        toDate:
          type: string
          format: date
          example: 2023-07-11
        repository:
          type: string
          example: dna
        articles:
          $ref: '#/components/schemas/ArticleList'
        failed_articles:
          $ref: '#/components/schemas/ArticleList'
    RepositoryList:
      type: array
      items:
        $ref: '#/components/schemas/RepositoryMeta'  
    RepositoryMeta:
      type: object
      properties:
        repository:
          type: string
          example: narratives1
        created:
          type: string
          format: date-time
          example: 2022-07-21T17:32:28Z
